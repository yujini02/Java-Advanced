1. 인터페이스 개념
: 사전적 의미 두 장치를 연결하는 접속기

:인터페이스 다형성 구현에 주요 기술로 이용된다.
 상속을 이용해서 다형성 구현할 수도 있고,
 인터페이스를 이용해서 다형성 구현할 수 있지만
 실무에서는 다형성 구현에 인터페이스로 구현하는 경우가 대부분이다.

2. 인터페이스와 구현 클래스 선언
 interface 키워드를 사용하여 선언
 .java 소스 -> ~.class 컴파일되어 물리적으로 클래스와 동일하다.

 인터페이스 선언
 접근제한자로는 클래스와 같이 default, public

3. 인터페이스의 멤버들... 6멤버
  public 상수 필드
  public 추상 메소드
  public 디폴트 메소드 (예외인 일반 메서드)
  public static(정적) 메소드
  private 메소드
  private static 메소드

  3.1 public 상수 필드
   인터페이스는 public static final 특성을 갖는 상수필드를 가질 수 있다.
   인터페이스의 필드는 public static final 갖는다.
   상수명(한번 정하면 변할 수 없는 값)
   가장큰값 -> maxValue x -> MAXVALUE, MAX_VALUE 형태로 선언

  실습 ) 동물(Animal)객체, 동물들은 모두 cry() 기능을 공통으로 가지고 있다.
      애완동물(Pet) 객체, 애완동물들은 모두 play()기능을 공통으로 가지고 있다.
      꼬리(tail) 객체, 모든 동물들은 다양한 길이의 꼬리를 가지고 있다.
      고양이(cat)은 꼬리를 갖고 있으며 울며(cry()), 잘 논다(play()).

  3.2 추상메서드(메소드) abstract method
  인터페이스는 구현(cat)클래스가 재정의해야 하는 public 추상 메서드를 멤버로 가질 수 있다.
  리턴타입, 메소드명, 매개변수만 기술되고 중괄호{}를 붙이지 않는 메소드 이다.
  (public abstract) returnType 메소드명(매개변수들 ...);

  3.3 디폴트 메소드
   완전한 실행 코드를 가진 디폴트 메소드를 선언할 수 있다.
   public default 리턴타입 메소드명(매개변수...){...}
   용도 : 상수 필드를 읽거나 추상 메소드를 호출하는 코드 작성

  3.4 정적메소드 (static 메소드)
  인터페이스에는 정적 메소드 선언이 가능한데
  가능한 이유는 구현객체가 없어도 인터페이스 만으로 호출이 가능하기 때문이다.

  [public | private] static 리턴타입 메소드명(매개변수...){}

  3.5 private 메소드
  인터페이스의 상수 필드, 추상메소드, 디폴트 메소드, 정적 메소드는 모두 public 접근 제한을 갖는다.
  컴파일러는 위 멤버들의 접근제한을 자동으로 public 추가해 준다.
  - private 메소드 : 구현 객체가 필요한 메소드

   디폴트 메소드와 정적메소드의 중복코드를 줄이기 위해 주로 사용됨
  3.6 private 정적 메소드
   구현 객체가 필요 없는 메소드, 디폴트 메소드 뿐만 아니라 정적 메소드 안에서도 호출 가능


