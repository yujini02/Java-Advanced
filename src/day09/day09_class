트리 (Tree)
Node 와 Branch (가지)를 이용해서, 사이클을 이루지 않도록 구성한 데이터 구조
트리 중에서 이진트리(Binary Tree)형태의 구조로, 탐색(검색) 알고리즘 구현을 위해 많이 사용됨.

- 필수 용어
1) 노드(Node)
  트리에서 데이터를 저장하는 요소 + 데이터와 다른 연결된 노드에 대한 Branch정보 포함
2) 루트 (Root Node) : 트리에 가장 최상위 노드 (맨 위에 있는 노드)
3) 레벨 (Level) : 최상위 노드를 level 0으로 하였을 때, 하위 Branch로 연결된 노드의 깊이(depth)
4) Parent Node(부모노드) : 어떤 노드의 다음 레벨에 연결된 노드
level1부터 부모노드가 될 수 있다. Root node는 시작 노드이지 부모 로드는 아니다.
5) Child Node(자식노드) : 어떤 노드에 상위 레벨과 연결된 노드
6) Lef Node(Terminal Node) : Child Node 가 하나도 없는 노드
7) Sibling(Brother Node) : 동인한 Parent Node 를 가진 노드
8) Depth : 트리에서 Node가 가질 수 있는 최대 Level

2. 이진 트리 : 노드의 최대 Branch 가 2인 트리
  이진 탐색 트리 (Binary Search Tree, BST) : 이진 트리에 추가적인 조건이 달린 트리
  왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 갖도록 구성

  데이터 탐색(검색)

3. 컬렉션 프레임워크의 대부분의 클래스들은 싱글 스레드 환경에서 사용하도록 설계되어 있음
 Vector, Hashtable이 동기화된 (Synchronized) 메소드로 구성되어 있어 스레드 환경에서 데이터를 안전하게 처리할 수 있다.

 List<T> synchronizedList(List<T> list) : List를 동기화된 List 리턴
 Set<T> synchronizedSet(Set<T> set)
 Map<T> synchronizedMap(Map<T> map)

 List<T> list = Collections.synchronizedList(new ArrayList<T>());
