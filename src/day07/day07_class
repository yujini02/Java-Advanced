java.lang.Class 클래스
Class객체를 이용: 클래스에 대한 모든 정보(메타데이터 : 멤버의 이름, 수, 메소드이름)
Reflection API : 구체적인 클래스 타입을 알지 못하더라도, 그 클래스의 정보에 접근 할 수 있도록 해주는 자바기법
                 객체를 통해 클래스의 정보를 분석하여 런타임에 클래스의 동작을 검사하거나 조작하는 프로그램 기법

                 프래임워크, 라이브러리에서 많이 사용됨. 스프링 DI(dependency injection) , Proxy, ModelMapper
                 Spring, Springboot, Hibernate, Lombok

2. 제너릭(Generics)
  자바5 에서 도입된 기능
  타입 매개변수로 작동하는 클래스, 인터페이스, 메서드 생성이 가능하게 한다.
  개발자가 사용하는 특정 데이터 타입과 무관하게 코드를 작성할 수 있게 코드 재사용성을 확장해 준다.

  만약, 제너릭하면
  개발자들은 일반적으로 다양한 유형의 저장하기 위해 Object와 같은 표준클래스를 사용한다.
  접근 방식은 과도한 타입캐스팅과 런타임 오류를 유발 할 수 있다.
  제너릭은 인스턴스화 할때 어떤 타입으로든 정의할 수 있는 제네릭클래스를 생성할 수 있도록 하여 격차를 줄일 수 있도록 지원기능

  제너릭장점
  -타입 안정성 제공: 컬렉션, 클래스에 어떤 타입의 객체가 저장될 수 있는지를 명확히 하여 런타임오류 줄인다.
  -코드 재사용성 : 여러 타입데이터 타입에 걸쳐 재사용할 수 있는 단일클래스 , 인터페이스 메서드를 생성할 수 있다.
                 코드 중복을 줄이고, 유지 보수성을 향상시킬 수 있다.
  -캐스팅 제거 : 컬렉션에서 요소를 검색할때 명시적 캐스팅의 필요성을 줄여 Clean Code 목표 달성
  -가독성 개선 : 사용되는 타입을 명확히 하여 코드의 가독성을 개선하고, 개발자가 코드를 소비하거나 유지관리 시 문서 역할을 한다.
  구문
  class ClassName<T>{}

  인터페이스 구문 : 어떤 데이터 타입이로든 작동할 수 있는 인터페이스이다.
  interface InterFaceName<T>{
             void method(T t);
  }
  public interface Processor<T>{
          void process(T input)
  }

  제너릭 메서드 : 메서드 내에서 타입 매개변수를 사용할 수 있다.
  구문
  public <T> void methodName(T param){

  }

  구속된 타입 매개변수
  타입 매개변수의 인수로 사용할 수 있는 타입을 제한 할 수 있다. extends 키워드

  class ClassName <T extends ClassName>{}

  제너릭타입을 사용할때 유연할 수 있도록 지원하는 와일드카드 (물음표) ? 상한과 하한을 지정할 수 있다.


3.람다를 사용한 함수형 인터페이스 프로그래밍에서 제너릭 사용
자바5 제너릭 등장 ===> 자바 8 람다 , 스트림API 등장 (더 유연하고, 재사용이 가능한 코드)
람다와 함께 제너릭을 효과적으로 사용하는 패턴

람다 => 익명함수를 표현하는 방법으로 도입,
   표현식 : (param) -> 표현식    (param) -> {실행문;}   List<String> names = Arrays.asList("John","Jane","Jack")
   names.forEach(name -> System.out.println(name) );

함수형인터페이스 : 하나의 추상 메서드를 포함하는 인터페이스

자바의 일반적인 함수형 인터페이스
- Runnable    : 매개변수 없음. 반환 값 없음
- Callable<V> : 매개변수 없음. 타입 V의 값을 반환
- Consumer<T> : 타입 T의 매개변수를 받고 반환값 없다.
- Supplier<T> : 타입 T의 매개변수를 받고, 타입 T의 값을 반환
- Function<T,R> : 타입 T의 매개변수 받고, 타입 R의 값을 반환
- Predicate<T> : 타입 T의 매개변수 받고 불리언 값 반환

실습예제)
-Course 클래스 : registerCourse1() => 모든 사람들이 들을 수 있는 과정 등록
                registerCourse2() => 학생만 과정 등록
                registerCourse3() => 직장인과 일반인들만 과정 등록

4. 컬렉션 프레임워크의 의미
  자바는 자료구조(Data Structure)를 바탕으로 객체들을 효율적으로 추가,삭제,검색 할 수 있도록
  관련된 인터페이스와 클래스들을 java.util 패키지에 포함시켜 놓음.

4-1. ArrayList
4-2. LinkedList (연결리스트)
     떨어진 곳에 존재하는 데이터를 화살표(포인터)로 연결해서 관리하는 데이터 구조
     데이터영역 : 노드(Node) 데이터의 저장단위 (데이터값 + 포인터) 구조
     포인터(pointer) : 각 노드안에서 다음이나 이전의 노드와의 연결정보를 가지고 있는 공간